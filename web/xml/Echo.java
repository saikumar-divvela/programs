import java.io.*;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class Echo extends DefaultHandler{
    static private Writer out;
    private String indentString="   ";
    private int indentLevel = 0;

	private void emit(String s) throws SAXException
	{
		try {
			out.write(s);
			out.flush();
		} catch(IOException e){
			throw new SAXException("I/0 Error",e);
		}
	}

	private void nl() throws SAXException
	{
		String lineEnd = System.getProperty("line.separator");
		try {
			out.write(lineEnd);
			for(int i=0;i<indentLevel;i++){
				emit(indentString);
			}
		} catch(IOException e) {
			throw new SAXException("I/O error",e);
		}
	}


	public void startDocument() throws SAXException
	{
		emit("<?xml	version='1.0' encoding='UTF-8' ?>");
		nl();
	}

	public void endDocument() throws SAXException
	{
		try {
			nl();
			out.flush();
		} catch (IOException e){
			throw new SAXException("I/O error",e);
		}
	}

	public void startElement(String namespaceURI,
							 String sName, // simple name (local name)
							 String qName,
							 Attributes attrs)
	throws SAXException
	{
		indentLevel++;
		String eName = sName; // element name
		if("".equals(eName)) eName = qName;
		nl();
		emit("<"+eName);
		if(attrs!=null){
			for(int i=0;i<attrs.getLength();i++){
				String aName = attrs.getLocalName(i); // Attr name
				if("".equals(aName)){
					aName = attrs.getQName(i);
				}
				emit(" ");
				emit(aName+"=\""+attrs.getValue(i)+"\"");
			}
		}
		emit(">");
	}

	public void endElement(String namespaceURI,
							String sName,
							String qName)
	throws SAXException
	{
		nl();
		emit("</"+qName+">");
		indentLevel--;
	}


	public void characters(char buf[], int offset,int len)
	throws SAXException
	{
		String s = new String(buf,offset,len);
		if(!s.trim().equals(""))
			emit(s);

	}

	public void setDocumentLocator(Locator l){
		try {
			out.write("LOCATOR");
			out.write("\n SYS ID:"+l.getSystemId());
			out.flush();
		} catch (IOException e) {
		}
	}

	public void processingInstruction(String target,String data)
	throws SAXException
	{
		nl();
		emit("PROCESS:");
		emit("<?"+target+" "+data+"?>");
	}

	public static void main(String args[]){
		if(args.length !=1) {
			System.err.println("Usage: cmd filename");
			System.exit(1);
		}
		DefaultHandler handler = new Echo();
		SAXParserFactory factory = SAXParserFactory.newInstance();
		try {
			// Set up output stream
			out = new OutputStreamWriter(System.out,"UTF8");
			// parse the input
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(new File(args[0]),handler);
		} catch(SAXParseException  spe){
			// Error generated by the parser
			System.out.println("\n** Parsing error"
				+",line "+spe.getLineNumber()
				+", uri "+spe.getSystemId());
			System.out.println("   "+spe.getMessage());
		} catch(SAXException sxe){
			Exception x = sxe;
			if(sxe.getException ()!=null) {
				x = sxe.getException();
			}
			x.printStackTrace();
		} catch (ParserConfigurationException pce){
			pce.printStackTrace();
		} catch(IOException ioe){
			ioe.printStackTrace();
		}
		System.exit(0);
	}

	public void error(SAXParseException e)
	throws SAXParseException
	{
		throw e;
	}

	public void warning(SAXParseException err)
	throws SAXParseException
	{
		System.out.println(" ** warning "
		+", line "+err.getLineNumber()
		+", uri "+err.getSystemId());
		System.out.println("   "+err.getMessage());
	}
}