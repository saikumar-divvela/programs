import java.io.*;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class Echo1 extends DefaultHandler{
	static private Writer  out;


	public void setDocumentLocator(Locator l)
	{
		try{
			out.write("LOCATOR");
			out.write("\n SYS ID:"+l.getSystemId());
			out.write("\n");
			out.flush();
		} catch(IOException e){

		}
	}

	public void processingInstruction(String target,String data)
	throws SAXException{
		nl();
		emit("PROCESS:");
		emit("<?"+target+" "+data+"?>");
	}
	private void emit(String s)throws SAXException
	{
		try {
			out.write(s);
			out.flush();
		} catch(IOException e) {
			throw new SAXException("I/O error",e);
		}

	}

	private void nl()
	throws SAXException
	{
		String lineEnd = System.getProperty("line.separator");
		try {
			out.write(lineEnd);
		} catch (IOException e) {
			throw new SAXException("I/O Error",e);

		}

	}

	public void characters(char buf[], int offset, int len)
	throws SAXException
	{
		String s = new String(buf, offset, len);
	    emit(s);
    }

	public void startDocument()
	throws SAXException
	{
		emit("<?xml	version='1.0' encoding ='UTF-8'?>");
		nl();

	}

	public void endDocument()
	throws SAXException
	{
		try {
			nl();
			out.flush();
		} catch(IOException e) {
			throw new SAXException("I/O Error",e);
		}

	}

	public void startElement(String namespaceURI,
							String sName,
							String qName,
							Attributes attrs)
	throws SAXException 	{
		String eName = sName;
		if("".equals(eName)) eName= qName;
		emit("<"+eName);
		if(attrs!=null){
			for(int i=0;i<attrs.getLength();i++){
				String aName = attrs.getLocalName(i);
				if("".equals(aName)) aName = attrs.getQName(i);
				emit(" ");
				emit(aName+"=\""+attrs.getValue(i)+"\"");

			}
		}
		emit(">");
	}

	public void endElement(String namesapceURI,
							String sName,
							String qName)
	throws SAXException
	{
		String eName = sName;
		if("".equals(eName)) eName = qName;
		emit("</"+eName	+">");

	}

	// treat validation errors as fatal
	public void error(SAXParseException e)
	throws SAXParseException
	{
	  throw e;
	}

	// dump warnings too
	// warnings can be checked with DTD only
	public void warning(SAXParseException err)
	throws SAXParseException
	{
	  System.out.println("** Warning"
	      + ", line " + err.getLineNumber()
	      + ", uri " + err.getSystemId());
	  System.out.println("   " + err.getMessage());
	}

	public static void main(String argv[])
	{
		if(argv.length!=1) {
			System.err.println("Usage: cmd filename");
			System.exit(1);
		}
		 DefaultHandler handler = new Echo1();
		 SAXParserFactory factory = SAXParserFactory.newInstance();
		 try {
			 out = new OutputStreamWriter(System.out, "UTF8");
			 SAXParser saxParser = factory.newSAXParser();
			 saxParser.parse(new File(argv[0]),handler);
		 }catch(SAXParseException spe){
			System.out.println("\n** Parsing error"+", line	"+spe.getLineNumber()+", URI "+spe.getSystemId());
			System.out.println(" "+spe.getMessage());
			Exception x = spe;
			if(spe.getException ()!=null)
				x = spe.getException();
			x.printStackTrace();
		 } catch (SAXException sxe) {
    		// Error generated by this application
    		// (or a parser-initialization error)
		    Exception  x = sxe;
		    if (sxe.getException() != null)
		        x = sxe.getException();
		    x.printStackTrace();
		} catch (ParserConfigurationException pce) {
    		// Parser with specified options can't be built
    		pce.printStackTrace();
		}
		 catch(IOException ioe){
			ioe.printStackTrace();
		}
		System.exit(0);
	}
}
